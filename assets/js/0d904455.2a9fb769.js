"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[447],{6652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(5893),r=t(1151);const s={sidebar_position:10},o="Data Utils",l={id:"API-Reference/data-utils",title:"Data Utils",description:"DataUtils",source:"@site/docs/API-Reference/data-utils.md",sourceDirName:"API-Reference",slug:"/API-Reference/data-utils",permalink:"/YiValApi/docs/API-Reference/data-utils",draft:!1,unlisted:!1,editUrl:"https://github.com/YiVal/YiVal/tree/master/website/docs/API-Reference/data-utils.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Data Generation",permalink:"/YiValApi/docs/API-Reference/data-generation"},next:{title:"Finetune",permalink:"/YiValApi/docs/API-Reference/finetune"}},a={},d=[{value:"<code>DataUtils</code>",id:"datautils",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Class Definition",id:"class-definition",level:3},{value:"Description",id:"description",level:4},{value:"Methods (Functions)",id:"methods-functions",level:4},{value:"Example",id:"example",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"data-utils",children:"Data Utils"}),"\n",(0,i.jsx)(n.h2,{id:"datautils",children:(0,i.jsx)(n.code,{children:"DataUtils"})}),"\n",(0,i.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h3,{id:"class-definition",children:"Class Definition"}),"\n",(0,i.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.h4,{id:"methods-functions",children:"Methods (Functions)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"evaluate_condition(condition: str, evaluator_output: EvaluatorOutput) -> bool"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses the ",(0,i.jsx)(n.code,{children:"_tokenize_condition"})," and ",(0,i.jsx)(n.code,{children:"_evaluate_tokenized_condition"})," functions to evaluate a condition against an evaluator output."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"read_code_from_path_or_module(path_or_module: str) -> Optional[str]"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Reads the source code from either an absolute file path or from a module and its function. Returns the source code if found, otherwise ",(0,i.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"transform_experiment_result_generic(code: str, exp_result: ExperimentResult) -> dict"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Transforms an experiment result into a generic format, where the result is a dictionary containing the ",(0,i.jsx)(n.code,{children:"Input"})," and ",(0,i.jsx)(n.code,{children:"Output"})," fields."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"    # Read the code from the source\r\n    code = read_code_from_path_or_module(\"yival.demo.headline_generation\")\r\n    import pickle\r\n\r\n    from yival.schemas.experiment_config import Experiment\r\n    condition = \"name == openai_prompt_based_evaluator AND result >= 3 AND display_name == clarity \"\r\n    with open('test_demo_results.pkl', 'rb') as f:\r\n        result: Experiment = pickle.load(f)\r\n    for combo_result in result.combination_aggregated_metrics:\r\n        results: List[ExperimentResult] = combo_result.experiment_results\r\n        for result in results:\r\n            for eo in result.evaluator_outputs:\r\n                condition_met = evaluate_condition(condition, eo)\r\n                if condition_met:\r\n                    # Extract the result pair given code. \r\n                    result_pair = transform_experiment_result_generic(\r\n                        code, result\r\n                    )\r\n                    print(result_pair)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var i=t(7294);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);