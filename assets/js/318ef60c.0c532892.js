"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[165],{6570:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});var r=i(5893),s=i(1151);const a={sidebar_position:3},d="Reader",t={id:"API-Reference/reader",title:"Reader",description:"BaseReader",source:"@site/docs/API-Reference/reader.md",sourceDirName:"API-Reference",slug:"/API-Reference/reader",permalink:"/YiValApi/docs/API-Reference/reader",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/API-Reference/reader.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Common Utils",permalink:"/YiValApi/docs/API-Reference/common-utils"},next:{title:"Evaluation",permalink:"/YiValApi/docs/API-Reference/evaluation"}},c={},l=[{value:"<code>BaseReader</code>",id:"basereader",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Class Definition",id:"class-definition",level:3},{value:"Description",id:"description",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Example",id:"example",level:3},{value:"Source Code",id:"source-code",level:3},{value:"<code>CSV Reader</code>",id:"csv-reader",level:2},{value:"Introduction",id:"introduction-1",level:3},{value:"Class Definition",id:"class-definition-1",level:3},{value:"<code>CSVReader(BaseReader)</code>",id:"csvreaderbasereader",level:4},{value:"Description",id:"description-1",level:5},{value:"Attributes",id:"attributes-1",level:5},{value:"Methods",id:"methods",level:5},{value:"Notes",id:"notes",level:5},{value:"Source Code ",id:"source-code-",level:5},{value:"<code>CSVReaderConfig(BaseReaderConfig)</code>",id:"csvreaderconfigbasereaderconfig",level:4},{value:"Description",id:"description-2",level:5},{value:"Attributes",id:"attributes-2",level:5},{value:"Source Code",id:"source-code-1",level:5},{value:"Example",id:"example-1",level:3},{value:"Sample CSV Data (<code>my_dataset.csv</code>)",id:"sample-csv-data-my_datasetcsv",level:4},{value:"Using the CSVReader",id:"using-the-csvreader",level:4},{value:"Results &amp; Handling",id:"results--handling",level:4},{value:"Using the CSVReader in YiVal config",id:"using-the-csvreader-in-yival-config",level:4},{value:"<code>HuggingFaceDatasetReader</code>",id:"huggingfacedatasetreader",level:2},{value:"Introduction",id:"introduction-2",level:3},{value:"Class Definition",id:"class-definition-2",level:3},{value:"<code>HuggingFaceDatasetReader(BaseReader)</code>",id:"huggingfacedatasetreaderbasereader",level:4},{value:"Description",id:"description-3",level:5},{value:"Attributes",id:"attributes-3",level:5},{value:"Methods",id:"methods-1",level:5},{value:"<code>HuggingFaceDatasetReaderConfig(BaseReaderConfig)</code>",id:"huggingfacedatasetreaderconfigbasereaderconfig",level:4},{value:"Description",id:"description-4",level:5},{value:"Attributes",id:"attributes-4",level:5},{value:"Example",id:"example-2",level:3},{value:"Filtering Out Hard Leetcode Problems in HugginFace Dataset",id:"filtering-out-hard-leetcode-problems-in-hugginface-dataset",level:4},{value:"Using the HuggingFaceDatasetReader in YiVal config:",id:"using-the-huggingfacedatasetreader-in-yival-config",level:4},{value:"Source Code",id:"source-code-2",level:3},{value:"Custom Reader Guide: <code>TXTReader</code>",id:"custom-reader-guide-txtreader",level:2},{value:"Introduction",id:"introduction-3",level:3},{value:"<code>BaseReader</code> Overview",id:"basereader-overview",level:3},{value:"Creating a Custom Reader (<code>TXTReader</code>)",id:"creating-a-custom-reader-txtreader",level:3},{value:"Design the TXTReaderConfig Class",id:"design-the-txtreaderconfig-class",level:4},{value:"Implement the TXTReader Class",id:"implement-the-txtreader-class",level:4},{value:"Config",id:"config",level:4},{value:"Conclusion",id:"conclusion",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"reader",children:"Reader"}),"\n",(0,r.jsx)(n.h2,{id:"basereader",children:(0,r.jsx)(n.code,{children:"BaseReader"})}),"\n",(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"This module provides an abstract foundation for data readers. Data readers are responsible for reading data from various sources, and this module offers a base class to define and register new readers, retrieve existing ones, and fetch their configurations. The design encourages efficient parallel processing by reading data in chunks."}),"\n",(0,r.jsx)(n.h3,{id:"class-definition",children:"Class Definition"}),"\n",(0,r.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.h4,{id:"attributes",children:"Attributes"}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.h3,{id:"source-code",children:(0,r.jsx)(n.a,{href:"https://github.com/YiVal/YiVal/blob/master/src/yival/data/base_reader.py",children:"Source Code"})}),"\n",(0,r.jsx)(n.h2,{id:"csv-reader",children:(0,r.jsx)(n.code,{children:"CSV Reader"})}),"\n",(0,r.jsx)(n.h3,{id:"introduction-1",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CSVReader"})," class offers a streamlined interface for reading datasets from CSV files. Built atop the BaseReader class, it provides extensive configuration options, ensures error handling, and facilitates reading data in chunks."]}),"\n",(0,r.jsx)(n.h3,{id:"class-definition-1",children:"Class Definition"}),"\n",(0,r.jsx)(n.h4,{id:"csvreaderbasereader",children:(0,r.jsx)(n.code,{children:"CSVReader(BaseReader)"})}),"\n",(0,r.jsx)(n.h5,{id:"description-1",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["\u200b    The ",(0,r.jsx)(n.code,{children:"CSVReader"})," class, derived from ",(0,r.jsx)(n.code,{children:"BaseReader"}),", is crafted to read datasets from CSV files."]}),"\n",(0,r.jsx)(n.h5,{id:"attributes-1",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"config (CSVReaderConfig)"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A configuration object detailing the reader's parameters."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"default_config (CSVReaderConfig)"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A default configuration for the reader."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"__init__(self, config: CSVReaderConfig)"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes the CSVReader with the provided configuration."}),"\n",(0,r.jsxs)(n.li,{children:["Parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config (CSVReaderConfig)"}),": The configuration object designated for the CSVReader."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"read(self, path: str) -> Iterator[List[InputData]]"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reads the CSV file and yields chunks of ",(0,r.jsx)(n.code,{children:"InputData"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path (str)"}),": Path pointing to the CSV file."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Returns: An iterator that successively yields lists of ",(0,r.jsx)(n.code,{children:"InputData"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"read"})," method inspects headers in the CSV file and issues an error if absent."]}),"\n",(0,r.jsx)(n.li,{children:"Rows that lack data values are bypassed, but a log warning is recorded."}),"\n",(0,r.jsx)(n.li,{children:"If a column is earmarked for expected results, the method extracts those values."}),"\n",(0,r.jsxs)(n.li,{children:["Data rows are consumed in chunks. When a chunk meets its specified size, it's yielded. The chunk size is determined by the ",(0,r.jsx)(n.code,{children:"chunk_size"})," attribute in the ",(0,r.jsx)(n.code,{children:"CSVReaderConfig"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The class enables registration with the BaseReader through the ",(0,r.jsx)(n.code,{children:"register_reader"})," method."]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"source-code-",children:(0,r.jsx)(n.a,{href:"https://github.com/YiVal/YiVal/blob/master/src/yival/data/csv_reader.py",children:"Source Code "})}),"\n",(0,r.jsx)(n.h4,{id:"csvreaderconfigbasereaderconfig",children:(0,r.jsx)(n.code,{children:"CSVReaderConfig(BaseReaderConfig)"})}),"\n",(0,r.jsx)(n.h5,{id:"description-2",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["\u200b    The configuration object is tailored specifically for the ",(0,r.jsx)(n.code,{children:"CSVReader"})," class."]}),"\n",(0,r.jsx)(n.h5,{id:"attributes-2",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"use_first_column_as_id (bool)"})}),": A flag to determine if the first column should be used as an ID. The default value is ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"expected_result_column (Optional[str])"})}),": Specifies the column name that contains expected results, if any. The default  value is ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"source-code-1",children:(0,r.jsx)(n.a,{href:"https://github.com/YiVal/YiVal/blob/master/src/yival/schemas/reader_configs.py",children:"Source Code"})}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Here is a step-by-step guide on how to use ",(0,r.jsx)(n.code,{children:"CSV Reader"}),"given a CSV data"]}),"\n",(0,r.jsxs)(n.h4,{id:"sample-csv-data-my_datasetcsv",children:["Sample CSV Data (",(0,r.jsx)(n.code,{children:"my_dataset.csv"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Suppose we have a dataset concerning sales data for different products:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Plain",children:"ProductID,ProductName,Sales,ExpectedOutput\r\n1001,WidgetA,500,High\r\n1002,WidgetB,150,Low\r\n1003,WidgetC,300,Medium\r\n1004,WidgetD,,Low\r\n1005,WidgetE,450,\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this CSV:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ProductID"})," is a unique identifier for products."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ProductName"})," is the name of the product."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Sales"})," represent the number of units sold."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ExpectedOutput"})," is a categorical value indicating the sales volume (High, Medium, Low)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"using-the-csvreader",children:"Using the CSVReader"}),"\n",(0,r.jsx)(n.p,{children:"Given the configuration below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:'config = CSVReaderConfig(use_first_column_as_id=True, expected_result_column="ExpectedOutput")\r\ncsv_reader = CSVReader(config)\r\ncsv_file_path = "./data/my_dataset.csv"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When we use the ",(0,r.jsx)(n.code,{children:"read"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:"for chunk in csv_reader.read(csv_file_path):\r\n    for data in chunk:\r\n        print(data.content)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The output would look like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Plain",children:"{'ProductID': '1001', 'ProductName': 'WidgetA', 'Sales': '500'}\r\n{'ProductID': '1002', 'ProductName': 'WidgetB', 'Sales': '150'}\r\n{'ProductID': '1003', 'ProductName': 'WidgetC', 'Sales': '300'}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Note:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The row with ",(0,r.jsx)(n.code,{children:"ProductID"})," 1004 is skipped because it has missing data in the ",(0,r.jsx)(n.code,{children:"Sales"})," column."]}),"\n",(0,r.jsxs)(n.li,{children:["The row with ",(0,r.jsx)(n.code,{children:"ProductID"})," 1005 is skipped because it lacks an ",(0,r.jsx)(n.code,{children:"ExpectedOutput"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ExpectedOutput"})," column is not present in the content as it's marked for extraction."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"results--handling",children:"Results & Handling"}),"\n",(0,r.jsxs)(n.p,{children:["The data extracted by the CSVReader will be in the form of ",(0,r.jsx)(n.code,{children:"InputData"})," objects. Each object will have:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"example_id"}),": The unique identifier (from the ",(0,r.jsx)(n.code,{children:"ProductID"})," column, as specified by the ",(0,r.jsx)(n.code,{children:"use_first_column_as_id"})," flag)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"content"}),": The actual content of the row (excluding the ",(0,r.jsx)(n.code,{children:"ExpectedOutput"})," column)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expected_result"}),": The extracted expected result from the ",(0,r.jsx)(n.code,{children:"ExpectedOutput"})," column."]}),"\n",(0,r.jsxs)(n.p,{children:["For the row with ",(0,r.jsx)(n.code,{children:"ProductID"})," 1001, the ",(0,r.jsx)(n.code,{children:"InputData"})," object will look like:"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Plain",children:"InputData(\r\n    example_id='1001',\r\n    content={'ProductID': '1001', 'ProductName': 'WidgetA', 'Sales': '500'},\r\n    expected_result='High'\r\n)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"using-the-csvreader-in-yival-config",children:"Using the CSVReader in YiVal config"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-YAML",children:"      dataset:\r\n        file_path: demo/data/yival_expected_results.csv\r\n        reader: csv_reader\r\n        source_type: dataset\r\n        reader_config:\r\n          expected_result_column: expected_result\n"})}),"\n",(0,r.jsx)(n.h2,{id:"huggingfacedatasetreader",children:(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader"})}),"\n",(0,r.jsx)(n.h3,{id:"introduction-2",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader"})," class provides an interface to read datasets directly from the HuggingFace Datasets server. It allows for fetching data, transforming its structure, and filtering based on inclusion and exclusion patterns."]}),"\n",(0,r.jsx)(n.h3,{id:"class-definition-2",children:"Class Definition"}),"\n",(0,r.jsx)(n.h4,{id:"huggingfacedatasetreaderbasereader",children:(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader(BaseReader)"})}),"\n",(0,r.jsx)(n.h5,{id:"description-3",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["\u200b    The ",(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader"})," class, derived from ",(0,r.jsx)(n.code,{children:"BaseReader"}),", is designed to read datasets from HuggingFace's Datasets server."]}),"\n",(0,r.jsx)(n.h5,{id:"attributes-3",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"config (HuggingFaceDatasetReaderConfig)"})}),": Configuration object specifying the reader's parameters."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"default_config (HuggingFaceDatasetReaderConfig)"})}),": Default configuration for the reader."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"__init__(self, config: HuggingFaceDatasetReaderConfig)"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Initializes the ",(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader"})," with the provided configuration."]}),"\n",(0,r.jsxs)(n.li,{children:["Parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config (HuggingFaceDatasetReaderConfig)"}),": The configuration object for the reader."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"read(self, path: str) -> Iterator[List[InputData]]"})}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reads the dataset from the specified HuggingFace Datasets server's URL and yields lists of ",(0,r.jsx)(n.code,{children:"InputData"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path (str)"}),": URL pointing to the HuggingFace Datasets server."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Returns:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An iterator that produces lists of ",(0,r.jsx)(n.code,{children:"InputData"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"huggingfacedatasetreaderconfigbasereaderconfig",children:(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReaderConfig(BaseReaderConfig)"})}),"\n",(0,r.jsx)(n.h5,{id:"description-4",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["\u200b    The configuration object is specific to the ",(0,r.jsx)(n.code,{children:"HuggingFaceDatasetReader"})," class."]}),"\n",(0,r.jsx)(n.h5,{id:"attributes-4",children:"Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"example_limit (int)"})}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The maximum number of examples to fetch from the dataset."}),"\n",(0,r.jsxs)(n.li,{children:["The default value is ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output_mapping (Dict[str, str])"})}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A mapping to transform the keys in the dataset. The ",(0,r.jsx)(n.code,{children:"Dict"})," key is the original dataset key, and the corresponding value is the new key."]}),"\n",(0,r.jsxs)(n.li,{children:["The default value is an empty dictionary or ",(0,r.jsx)(n.code,{children:"{}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"include (List[str])"})}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of regex patterns. Only items matching these patterns will be included."}),"\n",(0,r.jsxs)(n.li,{children:["The default value is an empty list or",(0,r.jsx)(n.code,{children:"[]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"exclude (List[str])"})}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"List of regex patterns. Items matching these patterns will be excluded."}),"\n",(0,r.jsxs)(n.li,{children:["The default value is an empty list or ",(0,r.jsx)(n.code,{children:"[]"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.h4,{id:"filtering-out-hard-leetcode-problems-in-hugginface-dataset",children:"Filtering Out Hard Leetcode Problems in HugginFace Dataset"}),"\n",(0,r.jsx)(n.p,{children:'In the example below, the reader fetches data from the given HuggingFace Datasets server\'s URL, transforms the key "question" to "leetcode_problem", and filters out any entry labeled as "Hard".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:"# Assuming necessary imports are in place\r\n\r\n# Define the reader configuration\r\nconfig = HuggingFaceDatasetReaderConfig(\r\n    chunk_size=1000,\r\n    example_limit=100,\r\n    output_mapping={'question': 'leetcode_problem'},\r\n    include=['^(?!.*# Hard).*$']\r\n)\r\n\r\n# Create an instance of HuggingFaceDatasetReader with the specified configuration\r\nreader = HuggingFaceDatasetReader(config)\r\n\r\n# Define the URL pointing to the HuggingFace Datasets server\r\nurl = \"https://datasets-server.huggingface.co/rows?dataset=BoyuanJackchen%2Fleetcode_free_questions_text&config=default&split=train\"\r\n\r\n# Read and process data\r\nfor data_chunk in reader.read(url):\r\n    for data in data_chunk:\r\n        print(data.content)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"using-the-huggingfacedatasetreader-in-yival-config",children:"Using the HuggingFaceDatasetReader in YiVal config:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-YAML",children:"  dataset:\r\n    file_path: https://datasets-server.huggingface.co/rows?dataset=griffin%2Fchain_of_density&config=annotated&split=test\r\n    reader: huggingface_dataset_reader\r\n    source_type: dataset\r\n    reader_config:\r\n      example_limit: 2\r\n      output_mapping:\r\n        article: article\n"})}),"\n",(0,r.jsx)(n.h3,{id:"source-code-2",children:(0,r.jsx)(n.a,{href:"https://github.com/YiVal/YiVal/blob/master/src/yival/data/huggingface_dataset_reader.py",children:"Source Code"})}),"\n",(0,r.jsxs)(n.h2,{id:"custom-reader-guide-txtreader",children:["Custom Reader Guide: ",(0,r.jsx)(n.code,{children:"TXTReader"})]}),"\n",(0,r.jsxs)(n.p,{children:["This guide provides the steps to create custom data readers by subclassing the provided ",(0,r.jsx)(n.code,{children:"BaseReader"})," class. The example demonstrates creating a ",(0,r.jsx)(n.code,{children:"TXTReader"})," to read ",(0,r.jsx)(n.code,{children:".txt"})," files."]}),"\n",(0,r.jsx)(n.h3,{id:"introduction-3",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Data readers are responsible for reading data from various sources. By subclassing the ",(0,r.jsx)(n.code,{children:"BaseReader"}),", you can create custom readers tailored to your specific data format needs."]}),"\n",(0,r.jsxs)(n.h3,{id:"basereader-overview",children:[(0,r.jsx)(n.code,{children:"BaseReader"})," Overview"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BaseReader"})," class offers a blueprint for designing data readers. It has methods for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Register new readers."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Retrieve registered readers and their configurations."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Read data in chunks."}),"\n",(0,r.jsxs)(n.p,{children:["The class provides an abstract method ",(0,r.jsx)(n.code,{children:"read"})," that you must override in your custom reader. The method is designed to read data in chunks for efficient parallel processing."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"creating-a-custom-reader-txtreader",children:["Creating a Custom Reader (",(0,r.jsx)(n.code,{children:"TXTReader"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"design-the-txtreaderconfig-class",children:"Design the TXTReaderConfig Class"}),"\n",(0,r.jsxs)(n.p,{children:["Before creating the reader, design a configuration class specific to the ",(0,r.jsx)(n.code,{children:"TXTReader"}),". This class will inherit from the base ",(0,r.jsx)(n.code,{children:"BaseReaderConfig"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:'from dataclasses import asdict, dataclass\r\nfrom yival.data.base_reader import BaseReaderConfig\r\n\r\n@dataclass\r\nclass TXTReaderConfig(BaseReaderConfig):    \r\n    """    \r\n    Configuration specific to the TXT reader.    \r\n    """\r\n    delimiter: str = "\\n"  # Default delimiter for txt files.\r\n    \r\n    def asdict(self):\r\n        return asdict(self)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"implement-the-txtreader-class",children:"Implement the TXTReader Class"}),"\n",(0,r.jsxs)(n.p,{children:["Now, create the ",(0,r.jsx)(n.code,{children:"TXTReader"})," class, subclassing the ",(0,r.jsx)(n.code,{children:"BaseReader"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-Python",children:'from typing import Iterator, List\r\n\r\nfrom txt_reader_config import TXTReaderConfig\r\nfrom yival.data.base_reader import BaseReader\r\nfrom yival.schemas.common_structures import InputData\r\n\r\nclass TXTReader(BaseReader):\r\n    """\r\n    TXTReader is a class derived from BaseReader to read datasets from TXT\r\n    files.\r\n\r\n    Attributes:\r\n        config (TXTReaderConfig): Configuration object specifying reader parameters.\r\n\r\n    Methods:\r\n        __init__(self, config: TXTReaderConfig): Initializes the TXTReader with\r\n        a given configuration.\r\n        read(self, path: str) -> Iterator[List[InputData]]: Reads the TXT file\r\n        and yields chunks of InputData.\r\n    """\r\n\r\n    config: TXTReaderConfig\r\n    default_config = TXTReaderConfig()\r\n\r\n    def __init__(self, config: TXTReaderConfig):\r\n        super().__init__(config)\r\n        self.config = config\r\n\r\n    def read(self, path: str) -> Iterator[List[InputData]]:\r\n        chunk = []\r\n        chunk_size = self.config.chunk_size\r\n\r\n        with open(path, mode="r", encoding="utf-8") as file:\r\n            for line in file:\r\n                line_content = line.strip().split(self.config.delimiter)\r\n\r\n                # Each line in the TXT file is treated as a separate data point.\r\n                example_id = self.generate_example_id({"content": line_content}, path)\r\n                input_data_instance = InputData(\r\n                    example_id=example_id,\r\n                    content=line_content\r\n                )\r\n                chunk.append(input_data_instance)\r\n\r\n                if len(chunk) >= chunk_size:\r\n                    yield chunk\r\n                    chunk = []\r\n\r\n            if chunk:\r\n                yield chunk\n'})}),"\n",(0,r.jsx)(n.h4,{id:"config",children:"Config"}),"\n",(0,r.jsx)(n.p,{children:"After defining the config and reader subclass, we can define the yml config file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-YAML",children:"custom_reader:  \r\n    txt_reader:    \r\n        class: /path/to/text_reader.TXTReader    \r\n        config_cls: /path/to/txt_reader_config.TXTReaderConfig\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-YAML",children:'dataset:  \r\n    source_type: dataset  \r\n    reader: txt_reader  \r\n    file_path: "/Users/taofeng/YiVal/data/headline_generation.txt"  \r\n    reader_config:   \r\n    delimiter: "\\n"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["Creating custom data readers with the provided framework is straightforward. You can design readers tailored to various data formats by simply subclassing the ",(0,r.jsx)(n.code,{children:"BaseReader"})," and overriding its ",(0,r.jsx)(n.code,{children:"read"})," method. With this capability, you can efficiently read data in chunks, making it suitable for parallel processing and large datasets."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>d});var r=i(7294);const s={},a=r.createContext(s);function d(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);